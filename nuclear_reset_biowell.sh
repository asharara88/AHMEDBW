#!/bin/bash

echo "üí• NUCLEAR RESET - REBUILDING BIOWELL FROM SCRATCH"
echo "=================================================="

# 1. Backup and clean
echo "1Ô∏è‚É£ Cleaning everything..."
rm -rf node_modules dist .vite package-lock.json

# 2. Create complete package.json
echo "2Ô∏è‚É£ Creating complete package.json..."
cat > package.json << 'PKG_EOF'
{
  "name": "biowell",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "tailwindcss": "^3.3.0",
    "terser": "^5.19.0",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}
PKG_EOF

# 3. Create vite.config.ts
echo "3Ô∏è‚É£ Creating vite.config.ts..."
cat > vite.config.ts << 'VITE_EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    minify: 'terser'
  }
})
VITE_EOF

# 4. Create tsconfig.json
echo "4Ô∏è‚É£ Creating tsconfig.json..."
cat > tsconfig.json << 'TS_EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
TS_EOF

# 5. Create tailwind.config.js
echo "5Ô∏è‚É£ Creating tailwind.config.js..."
cat > tailwind.config.js << 'TAILWIND_EOF'
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
TAILWIND_EOF

# 6. Create postcss.config.js
echo "6Ô∏è‚É£ Creating postcss.config.js..."
cat > postcss.config.js << 'POSTCSS_EOF'
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
POSTCSS_EOF

# 7. Create index.html
echo "7Ô∏è‚É£ Creating index.html..."
cat > index.html << 'HTML_EOF'
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BioWell - Health Dashboard</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
HTML_EOF

# 8. Create src directory and files
echo "8Ô∏è‚É£ Creating src files..."
mkdir -p src

# Create src/main.tsx
cat > src/main.tsx << 'MAIN_EOF'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
MAIN_EOF

# Create src/App.tsx
cat > src/App.tsx << 'APP_EOF'
import React, { useState, useEffect } from 'react';

const App: React.FC = () => {
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 p-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <header className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl mb-6 shadow-lg">
            <span className="text-2xl">ü©∫</span>
          </div>
          <h1 className="text-5xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent mb-4">
            BioWell
          </h1>
          <p className="text-xl text-gray-600 mb-2">Your Personal Health Dashboard</p>
          <div className="text-lg text-gray-500">
            {currentTime.toLocaleString()}
          </div>
        </header>

        {/* Dashboard Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
            <h2 className="text-xl font-semibold mb-4 text-green-800">Health Score</h2>
            <div className="text-3xl font-bold text-green-600">85%</div>
            <p className="text-gray-600">Overall wellness</p>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
            <h2 className="text-xl font-semibold mb-4 text-blue-800">Daily Goals</h2>
            <div className="text-3xl font-bold text-blue-600">4/5</div>
            <p className="text-gray-600">Tasks completed</p>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
            <h2 className="text-xl font-semibold mb-4 text-purple-800">Streak</h2>
            <div className="text-3xl font-bold text-purple-600">12</div>
            <p className="text-gray-600">Days active</p>
          </div>
        </div>

        {/* Status Indicator */}
        <div className="mt-12 text-center">
          <div className="inline-flex items-center justify-center space-x-2 bg-white/60 backdrop-blur-sm rounded-xl p-4 shadow-lg">
            <span className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
            <span className="text-sm font-medium text-gray-700">System Online</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
APP_EOF

# Create src/index.css
cat > src/index.css << 'CSS_EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  min-height: 100vh;
}
CSS_EOF

# 9. Create .gitignore
echo "9Ô∏è‚É£ Creating .gitignore..."
cat > .gitignore << 'GITIGNORE_EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Build outputs
dist/
dist-ssr/
*.local

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory
coverage/

# Build artifacts
.vite/
.cache/
GITIGNORE_EOF

# 10. Install dependencies
echo "üîü Installing all dependencies..."
npm install

if [ $? -ne 0 ]; then
    echo "‚ùå npm install failed!"
    exit 1
fi

# 11. Test build
echo "1Ô∏è‚É£1Ô∏è‚É£ Testing build..."
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ BUILD SUCCESSFUL!"
    echo "üìä Build size: $(du -sh dist)"
else
    echo "‚ùå Build failed!"
    exit 1
fi

# 12. Test dev server start
echo "1Ô∏è‚É£2Ô∏è‚É£ Testing dev server..."
timeout 5s npm run dev > /dev/null 2>&1
if [ $? -eq 124 ]; then
    echo "‚úÖ Dev server starts successfully"
else
    echo "‚ö†Ô∏è Dev server test inconclusive"
fi

echo ""
echo "üéâ NUCLEAR RESET COMPLETE!"
echo "=========================="
echo "‚úÖ All files created from scratch"
echo "‚úÖ All dependencies installed"
echo "‚úÖ Build system working"
echo "‚úÖ Tailwind CSS configured"
echo "‚úÖ TypeScript configured"
echo "‚úÖ React app functional"
echo ""
echo "üöÄ YOUR BIOWELL APP IS NOW WORKING!"
echo "Run 'npm run dev' to start development"
echo "Run 'npm run build' to build for production"
